"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const alias_map_1=require("../alias-map");describe("Initialization",()=>{test("Basic initialization.",()=>{let e=new alias_map_1.AliasMap;expect(e).toBeDefined()})}),describe("Per-method tests.",()=>{let e;beforeEach(()=>{(e=new alias_map_1.AliasMap).set("alias-1-0","alias1value"),e.set("alias-2-0","alias2value"),e.set("alias-3-0","alias3value"),e.addAliases("alias-1-0","alias-1-1"),e.addAliases("alias-1-0","alias-1-2"),e.addAliases("alias-1-0","alias-1-3"),e.addAliases("alias-2-0","alias-2-1"),e.addAliases("alias-2-0","alias-2-2"),e.addAliases("alias-2-0","alias-2-3"),e.addAliases("alias-3-0","alias-3-1"),e.addAliases("alias-3-0","alias-3-2"),e.addAliases("alias-3-0","alias-3-3")}),describe("#get",()=>{test("Attempt to retrieve a value via a 'primary alias' succeeds.",()=>{expect(e.get("alias-1-0")).toBe("alias1value"),expect(e.get("alias-2-0")).toBe("alias2value"),expect(e.get("alias-3-0")).toBe("alias3value")}),describe("Attempt to retrieve a value via it's 'secondary aliases' succeeds.",()=>{test.each([[1,"alias1value",["alias-1-1","alias-1-2","alias-1-3"]],[2,"alias2value",["alias-2-1","alias-2-2","alias-2-3"]],[3,"alias3value",["alias-3-1","alias-3-2","alias-3-3"]]])("Alias set #%i.",(a,t,s)=>{for(let a of s)expect(e.get(a)).toBe(t)})}),test("Attempt to retrieve a non-existent value returns undefined.",()=>{expect(e.get("alias-4-0")).toBeUndefined(),expect(e.get("alias-4-1")).toBeUndefined(),expect(e.get("alias-4-2")).toBeUndefined(),expect(e.get("alias-4-3")).toBeUndefined()})}),describe("#set",()=>{test("TODO",()=>{fail("Test not yet written...")})}),describe("#addAliases",()=>{test("TODO",()=>{fail("Test not yet written...")})}),describe("#has",()=>{test("Returns true when called for aliases that have been added via #set.",()=>{expect(e.has("alias-1-0")).toBeTruthy(),expect(e.has("alias-2-0")).toBeTruthy(),expect(e.has("alias-3-0")).toBeTruthy()}),test("Returns true when called for aliases that have been added via #addAlias.",()=>{for(let a=1;a<4;a++)for(let t=1;t<4;t++)expect(e.has("alias-"+a+"-"+t)).toBeTruthy()}),test("Returns false when called for values not present in the map.",()=>{expect(e.has("alias-4-0")).toBeFalsy()}),test("Returns false for aliases that have been removed via #removeAlias.",()=>{fail("Test not yet written...")}),test("Returns false for aliases that have been removed via #removeValue.",()=>{fail("Test not yet written...")})}),describe("#modify",()=>{test("TODO",()=>{fail("Test not yet written...")})}),describe("#removeAlias",()=>{test("TODO",()=>{fail("Test not yet written...")})}),describe("#removeValue",()=>{test("TODO",()=>{fail("Test not yet written...")})}),describe("#listAliases",()=>{describe("Correct aliases are returned for a 'primary alias'.",()=>{describe.each([[1,"alias-1-0",["alias-1-0","alias-1-1","alias-1-2","alias-1-3"]],[2,"alias-2-0",["alias-2-0","alias-2-1","alias-2-2","alias-2-3"]],[3,"alias-3-0",["alias-3-0","alias-3-1","alias-3-2","alias-3-3"]]])("Alias set #%i.",(a,t,s)=>{let i;beforeAll(()=>{i=e.listAliases(t)}),test("Result is well-defined.",()=>{expect(i).toBeDefined()}),test("Result contains the correct values.",()=>{for(let e of s)expect(i).toContain(e)}),test("Result is the appropriate length.",()=>{expect(i).toHaveLength(s.length)})})}),describe("Correct aliases are returned for a 'secondary alias'.",()=>{describe.each([[1,"alias-1-1",["alias-1-0","alias-1-1","alias-1-2","alias-1-3"]],[2,"alias-2-2",["alias-2-0","alias-2-1","alias-2-2","alias-2-3"]],[3,"alias-3-3",["alias-3-0","alias-3-1","alias-3-2","alias-3-3"]]])("Alias set #%i.",(a,t,s)=>{let i;beforeAll(()=>{i=e.listAliases(t)}),test("Result is well-defined.",()=>{expect(i).toBeDefined()}),test("Result contains the correct values.",()=>{for(let e of s)expect(i).toContain(e)}),test("Result is the appropriate length.",()=>{expect(i).toHaveLength(s.length)})})}),describe("Included 'search' alias is properly excluded from results when 'includeProvidedAlias' is set to false.",()=>{describe("When searching by 'primary alias'...",()=>{describe.each([[1,"alias-1-0",["alias-1-1","alias-1-2","alias-1-3"]],[2,"alias-2-0",["alias-2-1","alias-2-2","alias-2-3"]],[3,"alias-3-0",["alias-3-1","alias-3-2","alias-3-3"]]])("Alias set #%i.",(a,t,s)=>{let i;beforeAll(()=>{i=e.listAliases(t,!1)}),test("Result is well-defined.",()=>{expect(i).toBeDefined()}),test("Result contains the correct values.",()=>{for(let e of s)expect(i).toContain(e)}),test("Result does NOT contain 'search' alias.",()=>{expect(i).not.toContain(t)}),test("Result is the appropriate length.",()=>{expect(i).toHaveLength(s.length)})})}),describe("When searching by 'secondary alias'...",()=>{describe.each([[1,"alias-1-1",["alias-1-0","alias-1-2","alias-1-3"]],[2,"alias-2-2",["alias-2-0","alias-2-1","alias-2-3"]],[3,"alias-3-3",["alias-3-0","alias-3-1","alias-3-2"]]])("Alias set #%i.",(a,t,s)=>{let i;beforeAll(()=>{i=e.listAliases(t,!1)}),test("Result is well-defined.",()=>{expect(i).toBeDefined()}),test("Result contains the correct values.",()=>{for(let e of s)expect(i).toContain(e)}),test("Result does NOT contain 'search' alias.",()=>{expect(i).not.toContain(t)}),test("Result is the appropriate length.",()=>{expect(i).toHaveLength(s.length)})})})}),test("Attempts to retrieve a non-existent alias returns undefined.",()=>{expect(e.listAliases("alias-4-0")).toBeUndefined()})}),describe("#numberOfAliasesFor",()=>{test("TODO",()=>{fail("Test not yet written...")})}),describe("#size",()=>{test("Returns zero for newly initialized map.",()=>{expect((new alias_map_1.AliasMap).size()).toBe(0)}),test("Returns proper size for populated map.",()=>{expect(e.size()).toBe(3)}),describe("Size updates correctly after adding and removing values.",()=>{test("Iteration 1 of 3",()=>{e.removeValue("alias-1-0"),expect(e.size()).toBe(2)}),test("Iteration 2 of 3",()=>{e.removeValue("alias-1-0"),e.removeValue("alias-2-0"),expect(e.size()).toBe(1)}),test("Iteration 3 of 3",()=>{e.removeValue("alias-1-0"),e.removeValue("alias-2-0"),e.removeValue("alias-3-0"),expect(e.size()).toBe(0)}),test("TODO",()=>{fail("Test not yet written...")})}),test("Size does not change after removing non-existent values from the map.",()=>{e.removeValue("alias-4-0"),expect(e.size()).toBe(3)})}),describe("#clear",()=>{test("Method properly 'empties' the AliasMap.",()=>{e.clear(),expect(e.size()).toBe(0);for(let a=1;a<4;a++)for(let t=0;t<4;t++)expect(e.get("alias-"+a+"-"+t)).toBeUndefined()}),describe("Values can be added as expected after a clear operation.",()=>{test("TODO",()=>{fail("Test not yet written...")})})})});
//# sourceMappingURL=alias-map.test.js.map
