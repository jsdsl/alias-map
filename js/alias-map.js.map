{"version":3,"sources":["../ts/alias-map.ts"],"names":["AliasMap","[object Object]","this","aliasResolutionMap","Map","internalMap","internalKeyCounter","key","internalValue","get","undefined","value","force","has","removeAlias","internalKey","set","aliases","existingKey","newKey","push","displaced","delete","length","alias","includeProvidedAlias","index","splice","numberOfAliases","listAliases","size","clear","exports"],"mappings":"oEAyBA,MAAaA,SAyBZC,cAECC,KAAKC,mBAAqB,IAAIC,IAC9BF,KAAKG,YAAc,IAAID,IACvBF,KAAKI,mBAAqB,EAUpBL,IAAIM,GAEV,IAAIC,EACHN,KAAKG,YAAYI,IAAIP,KAAKC,mBAAmBM,IAAIF,IAElD,YAAsBG,IAAlBF,OAA6B,EACrBA,EAAcG,MAmBpBV,IAAIM,EAAQI,EAAUC,GAAiB,GAE7C,GAAIV,KAAKW,IAAIN,GAAM,CAElB,IAAIK,EACC,OAAQV,KAAKO,IAAIF,KAASI,EADpBT,KAAKY,YAAYP,GAK7B,IAAIQ,EAAsBb,KAAKI,qBAU/B,OARAJ,KAAKC,mBAAmBa,IAAIT,EAAKQ,GACjCb,KAAKG,YAAYW,IAAID,EAAa,CAEjCJ,MAAAA,EACAM,QAAS,CAAEV,MAIL,EAeDN,WAAWiB,EAAgBC,EAAWP,GAAiB,GAE7D,GAAIV,KAAKW,IAAIK,GAAc,CAE1B,GAAIhB,KAAKW,IAAIM,GAAS,OAAQjB,KAAKO,IAAIU,KAAYjB,KAAKO,IAAIS,GACvD,CAEJ,IAAIH,EAAsBb,KAAKC,mBAAmBM,IAAIS,GAKtD,OAHAhB,KAAKC,mBAAmBa,IAAIG,EAAQJ,GACnCb,KAAKG,YAAYI,IAAIM,GAAqCE,QAAQG,KAAKD,IAEjE,GAIF,OAAO,EAURlB,IAAIM,GAEV,OAAOL,KAAKC,mBAAmBU,IAAIN,GAY7BN,OAAOM,EAAQI,GAErB,GAAIT,KAAKW,IAAIN,GAAM,CAElB,IAAIQ,EAAsBb,KAAKC,mBAAmBM,IAAIF,GAClDC,EAAqCN,KAAKG,YAAYI,IAAIM,GAC1DM,EAAeb,EAAcG,MAIjC,OAFAH,EAAcG,MAAQA,EAEfU,GAeFpB,YAAYM,GAElB,GAAIL,KAAKW,IAAIN,GAAM,CAElB,IAAIQ,EAAsBb,KAAKC,mBAAmBM,IAAIF,GAEtDL,KAAKC,mBAAmBmB,OAAOf,GAE/B,IAAIC,EAAqCN,KAAKG,YAAYI,IAAIM,GAC1DE,EAAeT,EAAcS,QAQjC,OANKA,EAAQM,OAAS,GAA2B,IAAnBN,EAAQM,QAAkBN,EAAQ,KAAOV,IAEtEL,KAAKG,YAAYiB,OAAOP,GAIlBP,EAAcG,OAehBV,YAAYM,GAElB,GAAIL,KAAKW,IAAIN,GAAM,CAElB,IAAIQ,EAAsBb,KAAKC,mBAAmBM,IAAIF,GAClDC,EAAqCN,KAAKG,YAAYI,IAAIM,GAC1DE,EAAeT,EAAcS,QAEjC,IAAK,IAAIO,KAASP,EAASf,KAAKC,mBAAmBmB,OAAOE,GAI1D,OAFAtB,KAAKG,YAAYiB,OAAOP,GAEjBP,EAAcG,OAqBhBV,YAAYuB,EAAUC,GAAgC,GAE5D,GAAIvB,KAAKW,IAAIW,GAAQ,CAEpB,IAAIT,EAAsBb,KAAKC,mBAAmBM,IAAIe,GAClDP,EAAgBf,KAAKG,YAAYI,IAAIM,GAAqCE,QAE9E,IAAKQ,EAEJ,IAAK,IAAIC,EAAgB,EAAGA,EAAQT,EAAQM,OAAQG,IAE/CT,EAAQS,KAAWF,GAAOP,EAAQU,OAAOD,IAAS,GAMxD,OAAOT,GAoBFhB,mBAAmBuB,EAAUC,GAAgC,GAEnE,GAAIvB,KAAKW,IAAIW,GAAQ,CAEpB,IAAII,EAA2B1B,KAAK2B,YAAYL,GAAeD,OAI/D,OAFKE,GAAsBG,IAEpBA,EAED,OAAO,EAYR3B,OAEN,OAAOC,KAAKG,YAAYyB,KASlB7B,QAENC,KAAKC,mBAAmB4B,QACxB7B,KAAKG,YAAY0B,QACjB7B,KAAKI,mBAAqB,GA9S5B0B,QAAAhC,SAAAA","file":"alias-map.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t4:25 PM -- September 18th, 2019.\n *\tProject: alias-map\n */\n\n/**\n * A type that allows a simple grouping of information - the 'actual' value stored for a given alias set as well as a\n * group of aliases that point to the given value.\n */\ntype InternalValue<A, V> = {\n\t\n\tvalue: V;\n\taliases: A[];\n\t\n}\n\n/**\n * A map where multiple keys point to a single value, with options to remove either single keys (aliases) or all\n * associated values (all aliases for a given value).\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class AliasMap<A = any, V = any> {\n\t\n\t/**\n\t * A map associating aliases with 'internal keys'.\n\t *\n\t * 'Internal keys' are simply numeric values that allow a disconnect between 'alias sets' and their associated\n\t * values.\n\t */\n\tprivate aliasResolutionMap: Map<A, number>;\n\t\n\t/**\n\t * A map associating 'internal keys' with 'internal values'.\n\t *\n\t * @see InternalValue\n\t */\n\tprivate internalMap: Map<number, InternalValue<A, V>>;\n\t\n\t/**\n\t * A counter used for generating 'internal keys' as to ensure no duplicates are created.\n\t */\n\tprivate internalKeyCounter: number;\n\t\n\t/**\n\t * Initializes a new empty AliasMap.\n\t */\n\tpublic constructor() {\n\t\t\n\t\tthis.aliasResolutionMap = new Map<A, number>();\n\t\tthis.internalMap = new Map<number, InternalValue<A, V>>();\n\t\tthis.internalKeyCounter = 0;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the value associated with a given alias, or undefined if the alias does not exist in the map.\n\t *\n\t * @param key An alias for which a value should be retrieved.\n\t * @return The value associated with the provided alias, or undefined if the alias does not exist in the map.\n\t */\n\tpublic get(key: A): V | undefined {\n\t\t\n\t\tlet internalValue: InternalValue<A, V> | undefined =\n\t\t\tthis.internalMap.get(this.aliasResolutionMap.get(key) as number);\n\t\t\n\t\tif (internalValue === undefined) return undefined;\n\t\telse return internalValue.value;\n\t\t\n\t}\n\t\n\t/**\n\t * Associates the provided alias with the provided value, returning true if and only if, after this operation,\n\t * calling {@link AliasMap#get} with the provided alias will return the value provided.\n\t *\n\t * Note that this method returning 'true' does not necessarily mean that the internal state of the map was modified,\n\t * as it is possible that the provided key-value pair already to have existed. As such, the return condition of this\n\t * method was satisfied and the method therefore returned true.\n\t *\n\t * @param key An alias to associate with the provided value.\n\t * @param value A value to associate with the provided alias.\n\t * @param force true if the key-value pair should be forcibly set, potentially requiring the removal of the provided\n\t * alias as an alias for another value, and therefore potentially causing the removal of a value. Defaults to false.\n\t * @return true if and only if, after this operation, calling {@link AliasMap#get} with the provided alias will\n\t * return the value provided.\n\t */\n\tpublic set(key: A, value: V, force: boolean = false): boolean {\n\t\t\n\t\tif (this.has(key)) {\n\t\t\t\n\t\t\tif (force) this.removeAlias(key);\n\t\t\telse return (this.get(key) === value);\n\t\t\t\n\t\t}\n\t\t\n\t\tlet internalKey: number = this.internalKeyCounter++;\n\t\t\n\t\tthis.aliasResolutionMap.set(key, internalKey);\n\t\tthis.internalMap.set(internalKey, {\n\t\t\t\n\t\t\tvalue,\n\t\t\taliases: [ key ]\n\t\t\t\n\t\t});\n\t\t\n\t\treturn true;\n\t\t\n\t}\n\t\n\t/**\n\t * Adds an alias to an existing value via an existing alias, returning true if and only if, after this operation,\n\t * calling {@link AliasMap#get} with the provided alias will return the value provided.\n\t *\n\t * @param existingKey An existing alias in this map.\n\t * @param newKey A new alias that should be associated with the value of the existing alias.\n\t * @param force true if the alias should be forcibly set, potentially requiring the removal of the provided new\n\t * alias as an alias for another value, and therefore potentially causing the removal of a value. Defaults to false.\n\t * @return true if and only if, after this operation, calling {@link AliasMap#get} with the provided alias will\n\t * return the value provided.\n\t */\n\tpublic addAliases(existingKey: A, newKey: A, force: boolean = false): boolean {\n\t\t\n\t\tif (this.has(existingKey)) {\n\t\t\t\n\t\t\tif (this.has(newKey)) return (this.get(newKey) === this.get(existingKey));\n\t\t\telse {\n\t\t\t\t\n\t\t\t\tlet internalKey: number = this.aliasResolutionMap.get(existingKey) as number;\n\t\t\t\t\n\t\t\t\tthis.aliasResolutionMap.set(newKey, internalKey);\n\t\t\t\t(this.internalMap.get(internalKey) as InternalValue<A, V>).aliases.push(newKey);\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else return false;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns true if the provided alias has an associated value in this map.\n\t *\n\t * @param key An alias to check for an associated value.\n\t * @return true if the provided alias has an associated value in this map.\n\t */\n\tpublic has(key: A): boolean {\n\t\t\n\t\treturn this.aliasResolutionMap.has(key);\n\t\t\n\t}\n\t\n\t/**\n\t * Modifies the value of a given alias and all of it's associated aliases, returning the value that was displaced or\n\t * undefined if the provided alias did not exist in the map.\n\t *\n\t * @param key An alias for which it's associated value should be modified.\n\t * @param value The value that should replaced the existing value of the provided alias.\n\t * @return The value that was displaced or undefined if the provided alias did not exist in the map.\n\t */\n\tpublic modify(key: A, value: V): V | undefined {\n\t\t\n\t\tif (this.has(key)) {\n\t\t\n\t\t\tlet internalKey: number = this.aliasResolutionMap.get(key) as number;\n\t\t\tlet internalValue: InternalValue<A, V> = this.internalMap.get(internalKey) as InternalValue<A, V>;\n\t\t\tlet displaced: V = internalValue.value;\n\t\t\t\n\t\t\tinternalValue.value = value;\n\t\t\t\n\t\t\treturn displaced;\n\t\t\n\t\t} else return undefined;\n\t\t\n\t}\n\t\n\t/**\n\t * Attempts to remove an alias from this map, returning the value associated with the removed alias if one existed,\n\t * otherwise returning undefined.\n\t *\n\t * Note that the removal of the last existing alias for a given value implies the removal of the value from the map.\n\t *\n\t * @param key The alias that should be removed from the map.\n\t * @return The value associated with the removed alias if one existed, otherwise undefined.\n\t */\n\tpublic removeAlias(key: A): V | undefined {\n\t\n\t\tif (this.has(key)) {\n\t\t\t\n\t\t\tlet internalKey: number = this.aliasResolutionMap.get(key) as number;\n\t\t\t\n\t\t\tthis.aliasResolutionMap.delete(key);\n\t\t\t\n\t\t\tlet internalValue: InternalValue<A, V> = this.internalMap.get(internalKey) as InternalValue<A, V>;\n\t\t\tlet aliases: A[] = internalValue.aliases;\n\t\t\t\n\t\t\tif ((aliases.length < 0) || ((aliases.length === 0) && (aliases[0] === key))) {\n\t\t\t\t\n\t\t\t\tthis.internalMap.delete(internalKey);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn internalValue.value;\n\t\t\t\n\t\t} else return undefined;\n\t\n\t}\n\t\n\t/**\n\t * Attempts to remove the value that is associated with the provided alias from the map, returning the\n\t * aforementioned value if the provided alias existed within the map, otherwise returning undefined.\n\t *\n\t * Note that this implies the removal of all of the aliases for the removed value.\n\t *\n\t * @param key The alias for which its associated value should be removed from the map.\n\t * @return The value that was removed from the map if one existed, otherwise undefined.\n\t */\n\tpublic removeValue(key: A): V | undefined {\n\t\t\n\t\tif (this.has(key)) {\n\t\t\t\n\t\t\tlet internalKey: number = this.aliasResolutionMap.get(key) as number;\n\t\t\tlet internalValue: InternalValue<A, V> = this.internalMap.get(internalKey) as InternalValue<A, V>;\n\t\t\tlet aliases: A[] = internalValue.aliases;\n\t\t\t\n\t\t\tfor (let alias of aliases) this.aliasResolutionMap.delete(alias);\n\t\t\t\n\t\t\tthis.internalMap.delete(internalKey);\n\t\t\t\n\t\t\treturn internalValue.value;\n\t\t\t\n\t\t} else return undefined;\n\t\n\t}\n\t\n\t/**\n\t * Returns an array of aliases associated with the provided input alias, or undefined if the input array does not\n\t * exist within the map.\n\t *\n\t * A second parameter, a boolean, can be set, determining whether or not the input alias should be included in the\n\t * returned array of aliases. If a truthy value is provided, the input alias will be included, otherwise the input\n\t * alias will be removed from the returned array. Note that if a truthy value is provided, this method is operates\n\t * in O(1) time, whereas if a falsy value is provided, this method runs in O(k) time where k is the number of\n\t * aliases associated with the input alias.\n\t *\n\t * @param alias The alias for which to return associated aliases.\n\t * @param includeProvidedAlias true if the input alias should be included in the returned array of aliases. Defaults\n\t * to true.\n\t * @return An array of aliases that are associated/equivalent to the provided input alias.\n\t */\n\tpublic listAliases(alias: A, includeProvidedAlias: boolean = true): A[] | undefined {\n\t\t\n\t\tif (this.has(alias)) {\n\t\t\t\n\t\t\tlet internalKey: number = this.aliasResolutionMap.get(alias) as number;\n\t\t\tlet aliases: A[] = (this.internalMap.get(internalKey) as InternalValue<A, V>).aliases;\n\t\t\t\n\t\t\tif (!includeProvidedAlias) {\n\t\t\t\t\n\t\t\t\tfor (let index: number = 0; index < aliases.length; index++) {\n\t\t\t\t\t\n\t\t\t\t\tif (aliases[index] === alias) aliases.splice(index--, 1);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn aliases;\n\t\t\t\n\t\t} else return undefined;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the number of aliases that exist in the map for the input alias, or zero if the alias does not exist\n\t * within the map.\n\t *\n\t * A second parameter, a boolean, can be set, determining whether or not the input alias should be counted in the\n\t * returned value. Although this method internally uses {@link AliasMap#listAliases}, and despite the O(k) nature\n\t * of the aforementioned method, this second parameter will not change the running speed of this method, which will\n\t * always be O(1).\n\t *\n\t * @param alias The alias for which to return a count of equivalent aliases.\n\t * @param includeProvidedAlias true if the input alias should be counted in the returned value.\n\t * @return The number of aliases that exist in the map for the input alias, or zero if the alias does not exist\n\t * within the map.\n\t */\n\tpublic numberOfAliasesFor(alias: A, includeProvidedAlias: boolean = true): number {\n\t\t\n\t\tif (this.has(alias)) {\n\t\t\t\n\t\t\tlet numberOfAliases: number = (this.listAliases(alias) as A[]).length;\n\t\t\t\n\t\t\tif (!includeProvidedAlias) numberOfAliases--;\n\t\t\t\n\t\t\treturn numberOfAliases;\n\t\t\t\n\t\t} else return 0;\n\t\t\n\t}\n\t\n\t/**\n\t * Returns the number of values stored in this map.\n\t *\n\t * Note that the value that this method returns is in no way associated with the number of aliases that exist for\n\t * any given value within the map.\n\t *\n\t * @return The number of values stored in this map.\n\t */\n\tpublic size(): number {\n\t\t\n\t\treturn this.internalMap.size;\n\t\t\n\t}\n\t\n\t/**\n\t * Resets this map to an empty state, removing all of its stored key-value pairs.\n\t *\n\t * @return Returns void.\n\t */\n\tpublic clear(): void {\n\t\n\t\tthis.aliasResolutionMap.clear();\n\t\tthis.internalMap.clear();\n\t\tthis.internalKeyCounter = 0;\n\t\n\t}\n\t\n}"]}